def switch(s):
    switcher = {
        0:
            dcol = (660 * 10 ** (-2) + 752 * 10 ** (-2) + 520 * 10 ** (-2) + 634 * 10 ** (-2) + 720 * 10 ** (-2) + 710 * 10 ** (
        -2)) / 6
    M =
    D = ((A * T ** (3 / 2)) / (1 * dcol ** 2 * colint)) * m.sqrt(1 / M1 + 1 / M2),  # co2, co, nh3, no, so2
        1: i = 1
    dcol = (660 * 10 ** (-2) + 752 * 10 ** (-2) + 520 * 10 ** (-2) + 634 * 10 ** (-2) + 710 * 10 ** (-2)) / 5
    M =
    D = ((A * T ** (3 / 2)) / (1 * dcol ** 2 * colint)) * m.sqrt(1 / M1 + 1 / M2),  # co2, co, nh3, no
        2: dcol = (660 * 10 ** (-2) + 752 * 10 ** (-2) + 520 * 10 ** (-2) + 720 * 10 ** (-2) + 710 * 10 ** (-2)) / 5
    M =
    D = ((A * T ** (3 / 2)) / (1 * dcol ** 2 * colint)) * m.sqrt(1 / M1 + 1 / M2),  # co2, co, nh3, so2
        3: dcol = (660 * 10 ** (-2) + 752 * 10 ** (-2) + 720 * 10 ** (-2) + 710 * 10 ** (-2)) / 5
    M =
    D = ((A * T ** (3 / 2)) / (1 * dcol ** 2 * colint)) * m.sqrt(1 / M1 + 1 / M2),  # co2, co, no, so2
        4: dcol = (660 * 10 ** (-2) + 520 * 10 ** (-2) + 720 * 10 ** (-2) + 710 * 10 ** (-2)) / 5
    M =
    D = ((A * T ** (3 / 2)) / (1 * dcol ** 2 * colint)) * m.sqrt(1 / M1 + 1 / M2),  # co2, nh3, no, so2
        5: dcol = (752 * 10 ** (-2) + 520 * 10 ** (-2) + 720 * 10 ** (-2) + 710 * 10 ** (-2)) / 5
    M =
    D = ((A * T ** (3 / 2)) / (1 * dcol ** 2 * colint)) * m.sqrt(1 / M1 + 1 / M2),  # co, nh3, no, so2
        6: dcol = (660 * 10 ** (-2) + 752 * 10 ** (-2) + 710 * 10 ** (-2)) / 4
    M =
    D = ((A * T ** (3 / 2)) / (1 * dcol ** 2 * colint)) * m.sqrt(1 / M1 + 1 / M2),  # co2, co, nh3
        7: dcol = (660 * 10 ** (-2) + 752 * 10 ** (-2) + 520 * 10 ** (-2) + 710 * 10 ** (-2)) / 4
    M =
    D = ((A * T ** (3 / 2)) / (1 * dcol ** 2 * colint)) * m.sqrt(1 / M1 + 1 / M2),  # co2, co, no
        8: dcol = (660 * 10 ** (-2) + 752 * 10 ** (-2) + 520 * 10 ** (-2) + 720 * 10 ** (-2) + 710 * 10 ** (-2)) / 4
    M =
    D = ((A * T ** (3 / 2)) / (1 * dcol ** 2 * colint)) * m.sqrt(1 / M1 + 1 / M2),  # co2, nh3, no
        9: dcol = (660 * 10 ** (-2) + 752 * 10 ** (-2) + 520 * 10 ** (-2) + 720 * 10 ** (-2) + 710 * 10 ** (-2)) / 4
    M =
    D = ((A * T ** (3 / 2)) / (1 * dcol ** 2 * colint)) * m.sqrt(1 / M1 + 1 / M2),  # co, nh3, no
        10: dcol = (660 * 10 ** (-2) + 752 * 10 ** (-2) + 520 * 10 ** (-2) + 720 * 10 ** (-2) + 710 * 10 ** (-2)) / 4
    M =
    D = ((A * T ** (3 / 2)) / (1 * dcol ** 2 * colint)) * m.sqrt(1 / M1 + 1 / M2),  # co2, co, so2
        11: dcol = (660 * 10 ** (-2) + 520 * 10 ** (-2) + 720 * 10 ** (-2) + 710 * 10 ** (-2)) / 5
    M =
    D = ((A * T ** (3 / 2)) / (1 * dcol ** 2 * colint)) * m.sqrt(1 / M1 + 1 / M2),  # co2, nh3, so2
        12: zero,  # co, nh3, so2
            13: zero,  # co2, no, so2
    14: zero,  # co, no, so2
    15: zero,  # nh3, no, so2
    16: zero,  # co2, co
    17: zero,  # co2, nh3
    18: zero,  # co2, no
    19: zero,  # co2, so2
    20: zero,  # co, nh3
    21: zero,  # co, no
    22: zero,  # co, so2
    23: zero,  # nh3, no
    24: zero,  # nh3, so2
    25: zero,  # no, so2
    26: zero,  # co2
    27: zero,  # co
    28: zero,  # nh3
    29: zero,  # no
    30: zero,  # so2

    }


def condif(L, n, dt, C0, Vx0, Vy0, T, co2, co, no, nh3, so2, vzd):
    import matplotlib.pyplot as plt
    import numpy as np
    import math as m

    dx = L / n
    dy = L / n

    A = 1.859 * 10 ** (-3)
    colint = 1

    br = 0

    gasovi = {
        "CO2": [660 * 10 ** (-2), 44],
        "CO": [752 * 10 ** (-2), 28],
        "NH3": [520 * 10 ** (-2), 17],
        "NO": [634 * 10 ** (-2), 30],
        "SO2": [720 * 10 ** (-2), 64],
        "Vazduh": [710 * 10 ** (-2), 28.9]
    }

    s = 0



    dcol12 = (dcol1 + dcol2) / 2

    plt.ion()

    x = np.linspace(dx / 2, L - dx / 2, n)
    y = np.linspace(dy / 2, L - dy / 2, n)

    C = np.empty((n, n))
    dCdt = np.empty((n, n))
    Vx = np.zeros((n, n))
    Vy = np.zeros((n, n))

    t = np.arange(0, 5, dt)

    C[:, :] = 0
    dCdt[:, :] = 0
    Vx[:, :] = 0.001
    Vy[:, :] = 0.001
    Vx[0:5, 0:(n - 1)] = Vx0
    Vy[0:5, 0:(n - 1)] = Vy0
    C[5, 17] = C0

    for s in range(0, len(t)):
        plt.clf()
        Vxp = Vx.copy()
        Vyp = Vy.copy()
        Vxp[-1, :] = Vxp[:, -1] = 0
        # Vxp[n,:] = Vxp[:,n] = 0
        Vyp[-1, :] = Vyp[:, -1] = 0
        # Vyp[n,:] = Vyp[:,n] = 0
        C[-1, :] = C[:, -1] = 0
        # C[n,:] = C[:,n]
        # C[7,7] = (m*dt)*R
        for i in range(0, n - 1):
            for j in range(0, n - 1):


                D = ((A * T ** (3 / 2)) / (1 * dcol12 ** 2 * colint)) * m.sqrt(1 / M1 + 1 / M2)
                # print(D)
                Vx[i, j] = Vxp[i, j] - dt * ((Vxp[i, j] / dx) * (Vxp[i, j] - Vxp[i - 1, j]) + (Vyp[i, j] / dy) * (
                        Vxp[i, j] - Vxp[i, j - 1]))
                Vy[i, j] = Vyp[i, j] - dt * ((Vxp[i, j] / dx) * (Vyp[i, j] - Vyp[i - 1, j]) + (Vyp[i, j] / dy) * (
                        Vyp[i, j] - Vyp[i, j - 1]))

                dCdt[i, j] = D * ((C[i + 1, j] - 2 * C[i, j] + C[i - 1, j]) / dx ** 2 + (
                        C[i, j + 1] - 2 * C[i, j] + C[i, j - 1]) / dy ** 2) - Vx[i, j] * (
                                     (C[i, j] - C[i - 1, j]) / dx) - Vy[i, j] * ((C[i, j] - C[i, j - 1]) / dy) + D * (
                        (C[i + 1, j] - 2 * C[i, j] + C[i - 1, j]) / dx ** 2 + (
                        C[i, j + 1] - 2 * C[i, j] + C[i, j - 1]) / dy ** 2) - Vx[i, j] * (
                                     (C[i, j] - C[i - 1, j]) / dx) - Vy[i, j] * ((C[i, j] - C[i, j - 1]) / dy) + D * (
                        (C[i + 1, j] - 2 * C[i, j] + C[i - 1, j]) / dx ** 2 + (
                        C[i, j + 1] - 2 * C[i, j] + C[i, j - 1]) / dy ** 2) - Vx[i, j] * (
                                     (C[i, j] - C[i - 1, j]) / dx) - Vy[i, j] * ((C[i, j] - C[i, j - 1]) / dy) + D * (
                        (C[i + 1, j] - 2 * C[i, j] + C[i - 1, j]) / dx ** 2 + (
                        C[i, j + 1] - 2 * C[i, j] + C[i, j - 1]) / dy ** 2) - Vx[i, j] * (
                                     (C[i, j] - C[i - 1, j]) / dx) - Vy[i, j] * ((C[i, j] - C[i, j - 1]) / dy)

        C = C + dCdt * dt
        # print(Vx)

        plt.imshow(C, cmap='viridis')
        plt.colorbar()
        plt.title(str(s * dt))
        plt.show()
        plt.pause(0.01)


condif(10, 35, 0.01, 2, 10, 10, 293, True, False, "")
