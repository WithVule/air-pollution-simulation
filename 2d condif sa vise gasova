import matplotlib.pyplot as plt
import numpy as np
import math as m

def biraj(case, T):
    # dcolco2 = 660 * 10 ** (-2)
    # dcolco = 752 * 10 ** (-2)
    # dcolnh3 = 520 * 10 ** (-2)
    # dcolno = 634 * 10 ** (-2)
    # dcolso2 = 720 * 10 ** (-2)
    # dcolv = 710 * 10 ** (-2)
    # dcol = 3996 * 10 ** (-2)

    # Mco2 = 44
    # Mco = 28
    # Mnh3 = 17
    # Mno = 30
    # Mso2 = 64
    # Mvzd = 29
    # Muk = 212

    lst = [
        {'dcol': 3996 * 10 ** (-2) / 6, 'M': [44, 28, 17, 30, 64],
         'MS': [212 - 44, 212 - 28, 212 - 17, 212 - 30, 212 - 64]},
        # co2, co, nh3, no, so2
        {'dcol': (3996 * 10 ** (-2) - 720 * 10 ** (-2)) / 5, 'M': [44, 28, 17, 30],
         'MS': [212 - 44, 212 - 28, 212 - 17, 212 - 30]},
        # co2, co, nh3, no
        {'dcol': (3996 * 10 ** (-2) - 634 * 10 ** (-2)) / 5, 'M': [44, 28, 17, 64],
         'MS': [212 - 44, 212 - 28, 212 - 17, 212 - 64]},
        # co2, co, nh3, so2
        {'dcol': (3996 * 10 ** (-2) - 520 * 10 ** (-2)) / 5, 'M': [44, 28, 30, 64],
         'MS': [212 - 44, 212 - 28, 212 - 30, 212 - 64]},
        # co2, co, no, so2
        {'dcol': (3996 * 10 ** (-2) - 752 * 10 ** (-2)) / 5, 'M': [44, 17, 30, 64],
         'MS': [212 - 44, 212 - 17, 212 - 30, 212 - 64]},
        # co2, nh3, no, so2
        {'dcol': (3996 * 10 ** (-2) - 660 * 10 ** (-2)) / 5, 'M': [28, 17, 30, 64],
         'MS': [212 - 28, 212 - 17, 212 - 30, 212 - 64]},
        # co, nh3, no, so2
        {'dcol': (3996 * 10 ** (-2) - 720 * 10 ** (-2) - 634 * 10 ** (-2)) / 4, 'M': [44, 28, 17],
         'MS': [212 - 44, 212 - 28, 212 - 17]},
        # co2, co, nh3
        {'dcol': (3996 * 10 ** (-2) - 720 * 10 ** (-2) - 520 * 10 ** (-2)) / 4, 'M': [44, 28, 30],
         'MS': [212 - 44, 212 - 28, 212 - 30]},
        # co2, co, no
        {'dcol': (3996 * 10 ** (-2) - 720 * 10 ** (-2) - 752 * 10 ** (-2)) / 4, 'M': [44, 17, 30],
         'MS': [212 - 44, 212 - 17, 212 - 30]},
        # co2, nh3, no
        {'dcol': (3996 * 10 ** (-2) - 720 * 10 ** (-2) - 660 * 10 ** (-2)) / 4, 'M': [28, 17, 30],
         'MS': [212 - 28, 212 - 17, 212 - 30]},
        # co, nh3, no
        {'dcol': (3996 * 10 ** (-2) - 634 * 10 ** (-2) - 520 * 10 ** (-2)) / 4, 'M': [44, 28, 64],
         'MS': [212 - 44, 212 - 28, 212 - 64]},
        # co2, co, so2
        {'dcol': (3996 * 10 ** (-2) - 634 * 10 ** (-2) - 752 * 10 ** (-2)) / 4, 'M': [44, 17, 64],
         'MS': [212 - 44, 212 - 17, 212 - 64]},
        # co2, nh3, so2
        {'dcol': (3996 * 10 ** (-2) - 634 * 10 ** (-2) - 660 * 10 ** (-2)) / 4, 'M': [28, 17, 64],
         'MS': [212 - 28, 212 - 17, 212 - 64]},
        # co, nh3, so2
        {'dcol': (3996 * 10 ** (-2) - 520 * 10 ** (-2) - 752 * 10 ** (-2)) / 4, 'M': [44, 30, 64],
         'MS': [212 - 44, 212 - 30, 212 - 64]},
        # co2, no, so2
        {'dcol': (3996 * 10 ** (-2) - 520 * 10 ** (-2) - 660 * 10 ** (-2)) / 4, 'M': [28, 30, 64],
         'MS': [212 - 28, 212 - 30, 212 - 64]},
        # co, no, so2
        {'dcol': (3996 * 10 ** (-2) - 752 * 10 ** (-2) - 660 * 10 ** (-2)) / 4, 'M': [17, 30, 64],
         'MS': [212 - 17, 212 - 30, 212 - 64]},
        # nh3, no, so2
        {'dcol': (3996 * 10 ** (-2) - 720 * 10 ** (-2) - 520 * 10 ** (-2) - 634 * 10 ** (-2)) / 3, 'M': [44, 28],
         'MS': [212 - 44, 212 - 28]},
        # co2, co
        {'dcol': (3996 * 10 ** (-2) - 720 * 10 ** (-2) - 752 * 10 ** (-2) - 634 * 10 ** (-2)) / 3, 'M': [44, 17],
         'MS': [212 - 44, 212 - 17]},
        # co2, nh3
        {'dcol': (3996 * 10 ** (-2) - 720 * 10 ** (-2) - 520 * 10 ** (-2) - 752 * 10 ** (-2)) / 3, 'M': [44, 30],
         'MS': [212 - 44, 212 - 30]},
        # co2, no
        {'dcol': (3996 * 10 ** (-2) - 634 * 10 ** (-2) - 520 * 10 ** (-2) - 752 * 10 ** (-2)) / 3, 'M': [44, 64],
         'MS': [212 - 44, 212 - 64]},
        # co2, so2
        {'dcol': (3996 * 10 ** (-2) - 720 * 10 ** (-2) - 660 * 10 ** (-2) - 634 * 10 ** (-2)) / 3, 'M': [28, 17],
         'MS': [212 - 28, 212 - 17]},
        # co, nh3
        {'dcol': (3996 * 10 ** (-2) - 720 * 10 ** (-2) - 520 * 10 ** (-2) - 660 * 10 ** (-2)) / 3, 'M': [28, 30],
         'MS': [212 - 44, 212 - 30]},
        # co, no
        {'dcol': (3996 * 10 ** (-2) - 660 * 10 ** (-2) - 520 * 10 ** (-2) - 634 * 10 ** (-2)) / 3, 'M': [28, 64],
         'MS': [212 - 28, 212 - 64]},
        # co, so2
        {'dcol': (3996 * 10 ** (-2) - 720 * 10 ** (-2) - 520 * 10 ** (-2) - 752 * 10 ** (-2)) / 3, 'M': [17, 30],
         'MS': [212 - 17, 212 - 30]},
        # nh3, no
        {'dcol': (3996 * 10 ** (-2) - 720 * 10 ** (-2) - 520 * 10 ** (-2) - 634 * 10 ** (-2)) / 3, 'M': [17, 64],
         'MS': [212 - 17, 212 - 64]},
        # nh3, so2
        {'dcol': (3996 * 10 ** (-2) - 752 * 10 ** (-2) - 520 * 10 ** (-2) - 634 * 10 ** (-2)) / 3, 'M': [30, 64],
         'MS': [212 - 30, 212 - 64]},
        # no, so2
        {'dcol': (660 * 10 ** (-2) + 710 * 10 ** (-2)) / 2, 'M': [44], 'MS': [29]},
        # co2
        {'dcol': (752 * 10 ** (-2) + 710 * 10 ** (-2)) / 2, 'M': [28], 'MS': [29]},
        # co
        {'dcol': (520 * 10 ** (-2) + 710 * 10 ** (-2)) / 2, 'M': [17], 'MS': [29]},
        # nh3
        {'dcol': (634 * 10 ** (-2) + 710 * 10 ** (-2)) / 2, 'M': [30], 'MS': [29]},
        # no
        {'dcol': (720 * 10 ** (-2) + 710 * 10 ** (-2)) / 2, 'M': [64], 'MS': [29]}]  # so2

    gasovi = lst[case]
    dcol = gasovi['dcol']
    M = gasovi['M']
    Ms = gasovi['MS']

    A = 1.859 * 10 ** (-3)
    colint = 1
    p = 1
    D = np.empty(len(M))

    for i in range(0, len(D)):
        D[i] = ((A * T ** (3 / 2)) / (p * dcol ** 2 * colint)) * m.sqrt(1 / M[i] + 1 / (Ms[i]))

    return D


def condif(L, n, dt, Vx0, Vy0, T, case, CO2, CO, NH3, NO, SO2):
    dx = L / n
    dy = L / n

    plt.ion()

    D = biraj(case, T)

    C = np.zeros((n, n, len(D)))
    C1 = np.zeros((n, n))
    Cfin = np.zeros((n, n))
    dCdt = np.zeros((n, n, len(D)))
    C0 = np.empty(5)
    C0[0] = CO2
    C0[1] = CO
    C0[2] = NH3
    C0[3] = NO
    C0[4] = SO2
    Vx = np.zeros((n, n))
    Vy = np.zeros((n, n))
    t = np.arange(0, 2, dt)

    Vx[:, :] = 0.001
    Vy[:, :] = 0.001
    Vx[0:15, 0:15] = Vx0
    Vy[0:25, 0:15] = Vy0
    for i in range(0, len(D)):
        if C0[i] > 0:
            C[int(n / 2), int(n / 2), i] = C0[i]

        Cfin[int(n / 2), int(n / 2)] = Cfin[int(n / 2), int(n / 2)] + C[int(n / 2), int(n / 2), i]

    for s in range(0, len(t)):
        plt.clf()
        Vxp = Vx.copy()
        Vyp = Vy.copy()
        Vxp[-1, :] = Vxp[:, -1] = 0
        # Vxp[n,:] = Vxp[:,n] = 0
        Vyp[-1, :] = Vyp[:, -1] = 0
        # Vyp[n,:] = Vyp[:,n] = 0
        C[-1, :, :] = C[:, -1, :] = 0
        # C[n-1,:, :] = C[:,n-1, :] = 0
        # C[7,7] = (m*dt)*R
        for i in range(0, n - 1):
            for j in range(0, n - 1):

                Vx[i, j] = Vxp[i, j] - dt * ((Vxp[i, j] / dx) * (Vxp[i, j] - Vxp[i - 1, j]) + (Vyp[i, j] / dy) * (
                        Vxp[i, j] - Vxp[i, j - 1]))
                Vy[i, j] = Vyp[i, j] - dt * ((Vxp[i, j] / dx) * (Vyp[i, j] - Vyp[i - 1, j]) + (Vyp[i, j] / dy) * (
                        Vyp[i, j] - Vyp[i, j - 1]))

                for k in range(0, len(D)):
                    dCdt[i, j, k] = D[k] * ((C[i + 1, j, k] - 2 * C[i, j, k] + C[i - 1, j, k]) / dx ** 2
                                            + (C[i, j + 1, k] - 2 * C[i, j, k] + C[i, j - 1, k]) / dy ** 2) \
                                    - Vx[i, j] * ((C[i, j, k] - C[i - 1, j, k]) / dx) - Vy[i, j] * (
                                            (C[i, j, k] - C[i, j - 1, k]) / dy)

                    C[i, j, k] = C[i, j, k] + dCdt[i, j, k] * dt
                    C1[i, j] = C[i, j, k]
                    Cfin[i, j] = Cfin[i, j] + C1[i, j]

        plt.imshow(Cfin, cmap='viridis')
        plt.colorbar()
        plt.title(str(s * dt))
        plt.show()

        Cfin = Cfin * 0
        plt.pause(0.001)


condif(10, 30, 0.01, 10, 10, 293, 0, 2, 2, 3, 2, 1)

# Duzina, broj koraka, vremenski korak, intenzitet vetra za x, za y, temperatura, slucaj, konc gasova (5 vrednosti, stavi nulu za nekoriscene gasove)

# 0: co2, co, nh3, no, so2
# 1: co2, co, nh3, no
# 2; co2, co, nh3, so2
# 3: co2, co, no, so2
# 4: co2, nh3, no, so2
# 5: co, nh3, no, so2
# 6: co2, co, nh3
# 7: co2, co, no
# 8: co2, nh3, no
# 9: co, nh3, no
# 10: co2, co, so2
# 11: co2, nh3, so2
# 12: co, nh3, so2
# 13: co2, no, so2
# 14: co, no, so2
# 15: nh3, no, so2
# 16: co2, co
# 17: co2, nh3
# 18: co2, no
# 19: co2, so2
# 20: co, nh3
# 21: co, no
# 22: co, so2
# 23: nh3, no
# 24: nh3, so2
# 25: no, so2
# 26: co2
# 27: co
# 28: nh3
# 29: no
# 30: so2
