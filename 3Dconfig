#v = vetar
#D = koeficijent difuzije
#C() = koncetracija
#C0 = maximalna koncetracija
#R = kolicina nastalog zagadjenja
#div*F = dFx/dx + dFy/dy + dFz/dz
#gradC = dC/dx*i + dC/dy*j + dC/dz*k

#dCdt = grad*(D*gradC) - grad*(v*C) + R

import numpy as np
from matplotlib import pyplot as plt\

plt.rcParams["figure.figsize"] = [7.00, 3.50]
plt.rcParams["figure.autolayout"] = True
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

L = 10
d = 1
bk = int(L/d)
dx = d
dy = d
dz = d
dt = 1
Vx = 5
Vy = 5
Vz = 0
D = 1
C0 = 1
R = 5

t = np.arange(0, 10, dt)
C = np.zeros((bk,)*3)
dCdt = np.zeros((bk,)*3)
dCx = np.empty(10)
dCy = np.empty(10)
dCz = np.empty(10)
x = np.linspace(0, L, bk)
y = np.linspace(0, L, bk)
z = np.linspace(0, L, bk)

C[5, 5, 5] = C0

C[0, 0, 0] = C[L-1, 0, 0] = C[0, L-1, 0] = C[0, 0,L-1] = 0

for m in range(1, len(t)):
    for i in range(1, bk - 1):
        for j in range(1, bk - 1):
            for k in range(1, bk - 1):
                
                dCx[m] = (C[i*dx + dx, j*dy, k*dz] - C[i*dx, j*dy, k*dz])/dt
                dCy[m] = (C[i*dx, j*dy + dy, k*dz] - C[i*dx, j*dy, k*dz])/dt
                dCz[m] = (C[i*dx , j*dy, k*dz + dz] - C[i*dx, j*dy, k*dz])/dt
                
                dCdt[i, j, k] = D*((dCx[m*dt] - dCx[m*dt - dt])/dt + (dCy[m*dt] - dCy[m*dt - dt])/dt + (dCz[m*dt] - dCz[m*dt - dt])/dt) - (Vx*(dCx[m*dt] - dCx[m*dt - dt])/dt + Vy*(dCy[m*dt] - dCy[m*dt - dt])/dt + Vz*(dCz[m*dt] - dCz[m*dt - dt])/dt)
        
    C = C + dCdt*dt
 
print("gotov dCdt")
    
for i in range(0, bk-1):
    x[i] = i*dx
    y[i] = i*dy
    z[i] = i*dz
    
print(C)

img = ax.scatter(x, y, z, c=C[:,0][:,0], cmap='YlOrRd', alpha=1)

plt.show()
